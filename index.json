[{"body":"","link":"https://blog.cwc.tw/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://blog.cwc.tw/categories/coding/","section":"categories","tags":null,"title":"coding"},{"body":"Need to create some signed-url links, using following command.\ngsutil signurl -d 2d service-account-key.json gs://my-gcs-bucket/my-object But the response keeps auguing\nThe signurl command requires the pyopenssl library (try pip install pyopenssl or easy_install pyopenssl) Already check those variables and install pyopenssl thousand times.\nCLOUDSDK_PYTHON=path/to/python CLOUDSDK_PYTHON_SITEPACKAGES=1 After checking the source code under platform/gsutil/gslib/commands/signurl.py\ntry: from OpenSSL.crypto import FILETYPE_PEM from OpenSSL.crypto import load_pkcs12 from OpenSSL.crypto import load_privatekey from OpenSSL.crypto import sign HAVE_OPENSSL = True except ImportError: HAVE_OPENSSL = False ... The load_pkcs12 has been removed from PyOpenSSL==23.3.0, so I install the previous version and get works.\npip install pyopenssl==22.1.0 References:\nCreate Signed URLs using gsutil ","link":"https://blog.cwc.tw/posts/gsutil-need-pip-install-pyopenssl/","section":"posts","tags":["python"],"title":"Gsutil Need Pip Install Pyopenssl"},{"body":"","link":"https://blog.cwc.tw/posts/","section":"posts","tags":null,"title":"Posts"},{"body":"","link":"https://blog.cwc.tw/tags/python/","section":"tags","tags":null,"title":"Python"},{"body":"","link":"https://blog.cwc.tw/","section":"","tags":null,"title":"Ryan's blog"},{"body":"","link":"https://blog.cwc.tw/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"以前就一直很愛用 ruby 提供的 securerandom 來產生隨機字串，\n但之前長時間使用 Python2 進行開發，一直忽略了 Python3 應該也會有類似的 module，\n直到昨天有需求又查了一下發現，ㄏㄏ早在 3.6 就有提供這個 module 了，試一下跟 securerandom 87% 像，推薦給大家\n簡單來說用 secrets 的好處是比起傳統 random module 產生出來的隨機字串\n更具有密碼學上的安全性 更快，更簡單可以產生字串 原理的話其實就是用 os.urandom 取代 random module 內的擬隨機演算法\n#### 偷懶版本，要注意 32 是 bytes，實際產生出來的長度因為 base64 encode 的關係會超過 32 from secrets import token_urlsafe print(token_urlsafe(32)) #### 長一點的版本，使用 secrets.choice import secrets import string alphabet = string.ascii_letters + string.digits random_string = \u0026#39;\u0026#39;.join(secrets.choice(alphabet) for i in range(16)) print(random_string) ChatGPT 的回答 The benefits of using the secrets module to generate random strings (and other values) over the random module are: Cryptographic security: The secrets module uses a cryptographically secure random number generator provided by the operating system, which is designed to be resistant to prediction and manipulation. The random module, on the other hand, uses a simpler algorithm that is not intended for cryptographic use. Convenience: The secrets module provides a simple and intuitive interface for generating random values, without requiring manual seeding or other setup. Efficiency: The secrets module is optimized for generating large amounts of random data quickly, and can generate random strings and other values much faster than the random module. References https://peps.python.org/pep-0506/ https://docs.python.org/3/library/secrets.html source code ","link":"https://blog.cwc.tw/posts/python-secrets-module/","section":"posts","tags":null,"title":"Why the secrets Module is the Ideal Choice for Generating Random Strings in Python"},{"body":"身為一個資料水管工，在開發的時候常常需要用 docker compose 把整套 Airflow 拉起來測試，\n這時候我的 intel-based 筆電常常就會起飛，在咖啡廳都被路人瞪，讓我非常不好意思。\n昨天試玩了一下 OrbStack，覺得好棒棒\n第一點是 OrbStack 啟動速度超級快！\n以前覺得 Docker Desktop 記憶體吃太兇的時候就想讓他重開，要等等上一分鐘，\n現在 OrbStack 啟動只要數秒，連偷個懶都不行，很不方便。\n再來是資源使用率部分，\nMemory 顯著有感，以前大概會吃到 10G swap，換了之後大概只吃到 3G，\nCPU 部分也滿不錯，之前開 Docker Desktop 的時候其他東西都會比較卡，\n開發體驗很差，索性開發完才拉起來測試，現在可以邊跑邊開發了，法喜充滿。\n轉換的痛點\n需要升級到 macOS Ventura (13.2?) 所有 image 要重 build behind the scenes\n背後的原理，是利用 macOS Ventura 提供的 Virtualization Framework，share kernel 跟 windows 的 WSL2 很像 未來會收錢，且用且珍惜 ","link":"https://blog.cwc.tw/posts/orbstack-the-docker-desktop-replacement/","section":"posts","tags":null,"title":"Orbstack the Docker Desktop Replacement"},{"body":"JSON_VALUE_ARRAY 只吃 scalar value\n任何不在 {string, number,boolean} 都會變成 NULL, 像是\nselect JSON_VALUE_ARRAY(\u0026#39;{\u0026#34;product_ids\u0026#34;: [UCCU]}\u0026#39;, \u0026#34;$.product_ids\u0026#34;); -- Row\tf0_\t1\tnull 但如果裡面有 NULL 則會噴錯\nselect JSON_VALUE_ARRAY(\u0026#39;{\u0026#34;product_ids\u0026#34;: [null]}\u0026#39;, \u0026#34;$.product_ids\u0026#34;); Array cannot have a null element; error in writing field f0_\n啊如果我就是要 scalar value 裡面又可能有 null 怎麼辦？ 這邊可以改用 JSON_QUERY_ARRAY 替代，但因為 output 不同（多了 double quote），視資料情況可以直接 trim 掉處理\nSELECT ARRAY(SELECT TRIM(item, \u0026#39;\u0026#34;\u0026#39;) FROM UNNEST(JSON_QUERY_ARRAY(\u0026#39;{\u0026#34;product_ids\u0026#34;: [null, 1, 2, 3]}\u0026#39;, \u0026#34;$.product_ids\u0026#34;)) AS item); ","link":"https://blog.cwc.tw/posts/bq_json_value_array/","section":"posts","tags":null,"title":"BigQuery JSON_VALUE_ARRAY, JSON_QUERY_ARRAY 差異跟小雷"},{"body":"自從用 markdown 開始寫工作日誌與筆記，一直放在 iCloud 上面，之前看到 iCloud 掉資料的新聞覺得好像還是有必要多異地備份一下，那時候選了 S3，看重的當然是 11 nines 的耐用性，這樣畢生筆記萬無一失了吧。\n這陣子發現 Cloudflare 的 R2 可以開始用 beta 版本了，基於我本人是 Cloudflare 無腦粉，馬上就想把目前的筆記也丟一份放在上面，於是就來研究一下。\n首先 Cloudflare R2 跟 S3 一樣是 11 nines，對外宣稱的耐用性跟 S3 一樣，再來是每 GB 價錢，R2 目前是 $0.015 per GB per month，跟 S3 Virginia $0.023 比起來低了 35%，再來是資料不收輸出的頻寬費用，這點我自己很好奇，那不就可以拿來做一個免費的圖床？最後是跟 s3 相容的 api 把 api token 申請好之後就可以直接用 aws cli 上傳檔案。\n一開始到 https://dash.cloudflare.com/sign-up/r2 申請服務，可以看到開 bucket 是不用選 region 的，下面說明 R2 buckets are automatically distributed across Cloudflare's data centers 另外也注意到 bucket name 應該是帳號內不能相同，跟 AWS 整個 region 不能有相同的 bucket name 不一樣。\n開完 bucket 之後開始處理懶人指令的部分\n註冊 API token aws configure 設定 複製 Account ID 假設你的筆記資料夾在 notes/, 上傳到 {bucket_name}, 使用 {account_id} 的 R2 endpoint 最後懶人指令會長這樣\nexport FILENAME=notes_$(date +\u0026#34;%Y-%m-%d\u0026#34;).tar.xz; \\ tar -chJf $FILENAME notes/ \u0026amp;\u0026amp; \\ aws s3api put-object --bucket {bucket_name} --key $FILENAME --body $FILENAME --endpoint-url https://{account_id}.r2.cloudflarestorage.com refs.\nhttps://developers.cloudflare.com/r2/examples/aws-cli/ ","link":"https://blog.cwc.tw/posts/upload_markdowns_to_r2/","section":"posts","tags":null,"title":"打包 markdown 筆記並上傳到 R2 (S3 like service)"},{"body":" 買了 BOOX note5 之後, 覺得電子紙螢幕呈現效果真舒服, 所有要長時間閱讀的東西都想丟進去. 另外發現雖然系統用 Android 11, 理論上可以裝所有 Android App, 包含瀏覽器, 不過在裝了一堆 App 發現都是虛幻, 排版與文字呈現還是用 epub 格式最好.\n本次範例使用 EbookLib, requests\n以及 mark_mew 大大的關於我幫新公司建立整套部屬流程那檔事 為範例 感謝 mark_mew 大大分享自身經驗\n另外粗粗產生出來的 epub 還是有很多排版問題要修, 像是圖片不見了, script tag 跑出來了, 在過一層 strip_tags 應該會好一點. 看來最適合的還是轉小說進去 (?\n這次網頁數量不多用 requests 抓抓就好, 就不寫 scrapy 了, 抓別人網站注意禮貌\n程式分成四段, 第四段跟 ebooklib 範例程式只有差異在產生 sections 部分\n抓內容網址 抓內容 -\u0026gt; local file 建立章節 寫成 epub from ebooklib import epub from lxml.html import fromstring from tqdm import tqdm import os import requests # 抓內容的網址 urls = [] headers={ \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36\u0026#34; } page_urls = [ \u0026#39;https://ithelp.ithome.com.tw/users/20141518/ironman/4653\u0026#39;, \u0026#39;https://ithelp.ithome.com.tw/users/20141518/ironman/4653?page=2\u0026#39;, \u0026#39;https://ithelp.ithome.com.tw/users/20141518/ironman/4653?page=3\u0026#39;, ] for url in tqdm(page_urls): response = requests.get(url, headers=headers) tree = fromstring(response.text) urls += [s.strip() for s in tree.xpath(\u0026#39;//h3[@class=\u0026#34;qa-list__title\u0026#34;]/a/@href\u0026#39;)] # 抓內容 for url in tqdm(urls): fname = url.split(\u0026#39;/\u0026#39;)[-1] with open(fname, \u0026#39;w\u0026#39;) as wf: response = requests.get(url, headers=headers) wf.write(response.text) # 建立章節 def build_sections(): sections = [] for fname in tqdm(sorted(os.listdir(\u0026#39;./ebooks\u0026#39;))): # 利用檔案名稱排章節順序 if \u0026#39;.\u0026#39; in fname: continue with open(\u0026#39;./ebooks/\u0026#39; + fname) as f: tree = fromstring(f.read()) title = tree.xpath(\u0026#39;//h2[@class=\u0026#34;qa-header__title ir-article__title\u0026#34;]/text()\u0026#39;)[0].strip() content = \u0026#39;\u0026#39;.join(list(tree.xpath(\u0026#39;//div[@class=\u0026#34;qa-panel__content\u0026#34;]\u0026#39;)[0].itertext())) content = content.replace(\u0026#39;\\n\u0026#39;, \u0026#39;\u0026lt;br/\u0026gt;\u0026#39;) section = epub.EpubHtml(title=title, file_name=fname, lang=\u0026#39;zh-hant\u0026#39;) section.content = content sections.append(section) return build_sections # 寫成 epub from ebooklib import epub book = epub.EpubBook() # set metadata book.set_identifier(\u0026#39;ithome_ironman_4653\u0026#39;) book.set_title(\u0026#39;關於我幫新公司建立整套部屬流程那檔事\u0026#39;) book.set_language(\u0026#39;zh-hant\u0026#39;) book.add_author(\u0026#39;mark_mew\u0026#39;) # create chapter sections = build_sections() # add chapter for section in sections: book.add_item(section) # define Table Of Contents book.toc = [ epub.Link(section.file_name, section.title, section.title) for section in sections ] # add default NCX and Nav file book.add_item(epub.EpubNcx()) book.add_item(epub.EpubNav()) # define CSS style style = \u0026#39;BODY {color: white;}\u0026#39; nav_css = epub.EpubItem(uid=\u0026#34;style_nav\u0026#34;, file_name=\u0026#34;style/nav.css\u0026#34;, media_type=\u0026#34;text/css\u0026#34;, content=style) # add CSS file book.add_item(nav_css) # basic spine book.spine = [\u0026#39;nav\u0026#39;] + sections # write to the file epub.write_epub(\u0026#39;關於我幫新公司建立整套部屬流程那檔事.epub\u0026#39;, book, {}) ","link":"https://blog.cwc.tw/posts/create_epub_from_website/","section":"posts","tags":null,"title":"抓網站內容做成電子書 (epub)"},{"body":"在家工作之後，幾乎都是用公司筆電，一些個人專案不小心套到公司 email 設定， 想說可能要寫個 script 來處理，沒想到一行就解決了。\ngit config --local user.name \u0026#34;Kaneshiro Takeshi\u0026#34; git config --local user.email \u0026#34;your_email@example.com\u0026#34; git rebase --root --exec \u0026#39;git commit --amend --no-edit --reset-author\u0026#39; ","link":"https://blog.cwc.tw/posts/rewrite_git_author_info/","section":"posts","tags":null,"title":"重寫所有 git author name \u0026 email"},{"body":"","link":"https://blog.cwc.tw/categories/hiking/","section":"categories","tags":null,"title":"Hiking"},{"body":"跟登山小夥伴走了劍龍稜，天公賞臉，給了一個晴天，殊不知這樣的好天氣是這次行程最大的挑戰。\n整路幾無遮蔭的曝曬，讓我狂噴汗，體力消耗得非常快。 隊友也受抽筋所苦，所幸受熱心山友贈與的鹽巴，讓症狀緩解不少。\n中途在 555 峰休息的時候，拿出早上在瑞芳車站前買的有夠香飯糰，但沒什麼食慾，咬了一口又默默放回背包\u0026hellip; 劍龍稜一定要挑個好天氣走啊，時程長，也不是很好撤退。\n但回頭看照片大家都是笑的，形象管理做得非常好（？\n成為山羊的感覺 快樂的上坡 快樂的下坡 解鎖新視角，基隆山 \u0026amp; 茶壺山 劍龍稜還會想在爬，不過讓我先休息個兩年吧。\n","link":"https://blog.cwc.tw/posts/mt_stegosaurus/","section":"posts","tags":null,"title":"熱得要命王國 - 劍龍稜"},{"body":"S3 does support the HTTP range request\nIt’s useful when you want the partial lines from a big file.\nBy aws s3 command line\naws s3api get-object --range bytes=0-10000 --bucket=[BUCKET] --key=[KEY] partial_results ","link":"https://blog.cwc.tw/posts/download_s3_partial_results/","section":"posts","tags":null,"title":"Download s3 partial results"},{"body":" Try to switch to jupterlab, the cpu/mem graph looks greeeat. https://github.com/jtpio/jupyterlab-system-monitor\nBut install n-times, the graph still no showing.\nThanks my colleague Bill, indicate the version issue of nbresuse\nReinstall the package, finally works!\n$ brew install node $ pip install jupyterlab $ pip install nbresuse==0.3.6 $ jupyter labextension install jupyterlab-topbar-extension jupyterlab-system-monitor $ jupyter notebook --generate-config Generate the jupyter config and fill the display config\nc.NotebookApp.ResourceUseDisplay.mem_limit = 16 * 1024 ** 3 c.NotebookApp.ResourceUseDisplay.track_cpu_percent = True c.NotebookApp.ResourceUseDisplay.cpu_limit = 8 ","link":"https://blog.cwc.tw/posts/jupyterlab-with-system-monitor/","section":"posts","tags":null,"title":"Jupyterlab With System Monitor"},{"body":" 這是一個合歡山爬三次，但西峰還是沒完成的故事。\n但天氣跟夥伴很讚，沒去西峰也不是很遺憾。\n哈哈山是在石門山旁邊的小山，就在往北峰的路上，路程短，眺望北峰最好的地方，走過路過千萬不要錯過。\n哈哈，十五分鐘撿三個山頭\n反射板路上 當天 15 號，但不是這個月最圓的一天 再晚一點的雲海 東峰夕照94讚 雪山西稜 ","link":"https://blog.cwc.tw/posts/hehuan/","section":"posts","tags":null,"title":"哈哈山與合歡山"},{"body":"又買了一個頭燈，之前使用 Black Diamond Storm 350，使用幾次發現一些不太順暢的地方。\n吃四個 AAA 電池有點麻煩，雖然有電量指示燈，每次帶還是有點恐懼感，要嘛換一組全新的電池，要嘛多帶一組電池。 操作複雜，因為功能很多，但只有一個按鈕，每次都要重新熟悉操作方式。 開起來總有一點高頻噪音（可能剛好買到機王）。 不過工作起來還是很稱職，亮度很夠，續航力也絕對夠爬一般摸早黑的行程，淋了幾次雨也都沒問題。\n不過想買東西不需要理由，不要心動只要行動。\n有一天突然看到 NiteCore NU25 這個頭燈，360 lm，卻只有 28g，又是充電電池，操作看一下簡單直覺，看了實在是心動動，後來考量了價錢、重量跟續航力，還是選續航力，最後買了 NU32。\n買回來把玩一下上面的痛點都有解決\nusb 充電，行動電源接著隔天又是一個好漢。 兩個按鈕，只有紅燈、主燈，沒有閃燈功能，亮度循環切換。 最令人喜歡的一點是亮度循環從較暗的亮度開始，漸次增強，我比較喜歡這種設計，很怕開燈閃瞎路人眼睛。\n剛好最近爬北插走太慢，有摸到一點黑爽用一下，頭燈有四檔，個人覺得 2 檔有點弱，3 檔剛好，4 檔真是太爽拉直接照亮一片樹林，\n1 lumen 33 lumens 190 lumens 550 lumens 相對來說之前用 Black Diamond Storm 主燈是 350/90，副燈是 40/4 lumens，印象副燈開起來就很夠用惹，不知為啥 NU32 的 33 lumens 模式就感覺有點小弱。\n因為沒摸幾個小時沒測到續航力，官方數據是寫 190 lumens 情況下可以撐 17 個小時， 我個人不太相信，有空把電用完看看。\n背面的背板感覺構造太簡單，強度有點堪慮。 總之兩個都是好頭燈，下一個可能上 18650 了吧，就是要更亮一點，才能照亮前方的路。\nJ今年的北插山毛櫸拉\n","link":"https://blog.cwc.tw/posts/headlight-nitecore-nu32/","section":"posts","tags":null,"title":"Headlight Nitecore Nu32"},{"body":"","link":"https://blog.cwc.tw/tags/japan/","section":"tags","tags":null,"title":"Japan"},{"body":"去年到妙高火打健走兩天，心心念念的就是明年要再來日本爬山\n享受舒適、乾燥的山屋以及不同於台灣的自然景觀\n於是就計畫了今年八月來場富士山 + 上高地的行程。然而計劃不周，飛抵日本後先爬富士山，在第二天登頂時氣象不佳，被風雨吹到懷疑人生，人活著好好的為什麼要來爬山\n下山時決定當天在河口湖休養一下，修補一下身心靈，放棄了原本隔天衝上高地的計畫，轉向鄰近的赤岳。\n赤岳因為是雪訓熱門地點有不少台灣人爬過，資訊很好找，是這趟旅程的備案，路程短，單程五～六小時可登頂，上稜線後又可以看到富士山，打個電話確認山屋有位置後就出發啦～\n行程 D1\nD2\nD1 帶著前一天晚餐甲府名物「餺飥」的祝福，一早搭 JR 到茅野準備搭巴士上山 車上 100% 都是登山客\n車程僅四十分鐘，隨即抵達美濃戶口，投完入山計畫書後，要踢一個小時車道，前往第一個休息點「赤岳/美濃戶山莊」 踢車道時聽到幾次底盤的撞擊聲，想想一開始的停車場好像也停不少台，看來不是每個登山客都會選擇把車開進去挑戰林道呢 (´・ω・`)\n走南沢前往行者小屋，路況一路好走，後來下山走北沢覺得路況差不多，差在北沢一路有水相伴卡素細\n很快就到了行者小屋，山屋內非常舒適，有暖爐及販售各種飲料/零嘴，可能旺季尾聲，又或是禮拜天，住的人極少，一個人獨享三人位的小空間。外面設有テント場，猜測是上山路線比較輕鬆，露營的人居然還住山小屋的人多，我是百分百支持舒適的山小屋拉。\n用完晚飯後就窩在大廳享受暖爐、熱茶跟一小櫃書，二樓也有插座可以充手機，可以少帶一顆行動電源，輕量化 upup（電源開到八點半）\n一個人上山還是有點孤單，Staff 似乎也在準備著明日早餐，大廳中飄逸著一點食物的香味，起身到處晃晃，意外發現 Staff 一位弟弟正在打 PS4 度過這夜晚，Damn 所以行動電源省下來的重量應該要多帶一隻手把來個台日交流才對！憤而上樓睡覺，睡眠品質極佳，一覺到天明。\n料金\n就在這用餐，前方是個室入口\n睡覺小角落\n入住的時候就跟我講晚餐是漢堡排，可惡很餓\nD2 早上五點半被細細速速欸聲音溫柔喚醒，沒有像在台灣山屋一樣聽到鬧鐘，究竟日本人是怎麼叫醒自己的呢？這是一個謎。 洗洗刷個牙等放飯，早餐有納豆呢！但這個我不能吃，我會過敏。（禮貌微笑），原封不動跟食器一起放回了回收口，ごちそうさん～\n06:30 出發，走地藏尾根，聽說是一段陡升的爬坡呢，實際爬還好，覺得過譽了，倒是越爬風越大，早上看明明還有 12 度啊，趕緊披上雨衣。\n上稜倒是比地圖上預估時間快，上稜前有一小段裸岩，雖然有鐵鍊但摸黑爬覺得有一點危險性，要摸黑建議走文三郎尾根上去唷～\n因為舉目所及皆是白牆，壯觀的稜線、富士山、山下風景，這些通通都沒有，速速趕路登頂之後也不爬阿彌陀岳了，直接從文三郎尾根回山屋\n早餐\n行者小屋與驚鴻一瞥的山下風景\n鐵梯，還滿穩的\n回山屋跟 Staff 妹妹買罐可樂之後，算一下時間尚早，還可以到赤岳鉱泉小屋，走北沢下山。 Staff 妹妹會一點中文啊，跟昨天的弟弟看起來都國高中生而已，應該是一家人吧，難不成是家族事業 (x)，說了山頂整片霧的慘狀之後用中文叫我下次再來，好哦下次我會查好氣象 QQ\n往赤岳鉱泉小屋先上後下，落差有一百公尺，下坡居多，30 分鐘搞定，這間山屋有溫泉可入浴呢，定好行者小屋才發現的，捶心肝．八岳有溫泉的山屋似乎不少間，很想試試爬山泡溫泉的感覺\n小屋附近的巨大菇菇 覺得很詳細的路況解說\n下山走很快，兩小時就踢出來了，起霧的山頭不值得留戀，巴士 + JR 回東京。\n整體來說這趟八岳還不錯，雖然登頂沒景，但是山屋舒適，里程短路又好走。受限於巴士時間，沒辦法走太多座，大部分人似乎都直接南北縱走，從赤岳走到硫磺岳，然後一樣下赤岳鉱泉小屋踢到美濃戶。\n費用部分最貴還是交通，東京來回茅野 JR 約一萬初，或許也可以考慮高速巴士，錢可能更省一點。\nRefs: 赤岳鉱泉・行者小屋 茅野巴士至美濃戶口 登山天氣 YAMAP ","link":"https://blog.cwc.tw/posts/hiking-akadake-yatsukadake/","section":"posts","tags":["Japan"],"title":"日本自助爬山 - 赤岳（八ヶ岳）"},{"body":"","link":"https://blog.cwc.tw/tags/keyboard/","section":"tags","tags":null,"title":"keyboard"},{"body":"About 4 months after changing the typing layout to Norman. I think I will type with Norman last a long time (unless I\u0026rsquo;m interesting w/ another one).\nI forgot QWERTY Typing bopomofo (Chinese typing, and it\u0026rsquo;s interesting story is another challenge on ErgoDox, so first, I flash my ErgoDox\u0026rsquo;s firmware to use Norman, then I can still type bopomofo on my laptop\u0026rsquo;s keyboard. I will have some time will type with QWERTY. I can change both layout in minutes on that time.\nBut changing keyboard is clumsy. I start to use IME to change Norman and bopomofo after a month. That means my small time with QWERTY is gone. And I found that I cannot type with QWERTY fluently. OMG I forgot QWERTY! Feeling annoying when use other people\u0026rsquo;s laptop.\nDeliberate practicing is important Achieve 40 ~ 50 WPM in 2 month. Guess how many WPM I can type after 4 months? Only 50 WPM, haha.\nI practice almost randomly. Maybe twice a week and last about 5 or 10mins. To my way of thinking I will more, more faster since I type it all day. But the reality is not.\nI still cannot type 60~70 easily. I think deliberate practicing and keep 1 or 2 month then I can achieve it. But 50 WPM is enough for me, maybe I will continue the lesson someday.\nEnd? I still cannot type in 6,70 speed. But I use Norman happily. Also found some bigram I struggle on it. Like ck jp jpy but it\u0026rsquo;s not a popular bigrams.\nI guess every layout have it\u0026rsquo;s own hard bigrams. Norman still a good candidate from QWERTY. Maybe it\u0026rsquo;s time to check Dvorak (the disaster you know).\n","link":"https://blog.cwc.tw/posts/learning-the-norman-layout-4-months/","section":"posts","tags":["keyboard","敗家"],"title":"Learning the Norman Layout 4 months"},{"body":"","link":"https://blog.cwc.tw/tags/%E6%95%97%E5%AE%B6/","section":"tags","tags":null,"title":"敗家"},{"body":"My shoulder One day I\u0026rsquo;m looking for a split keyboard try to make my shoulder feel better at work.\nI need to keep the round shoulder posture almost all day. Make my body curl and back pain sometimes.\nWhat I found is ErgoDox EZ, and received my new keyboard after 10 days.\nErgoDox ErgoDox is a split, ortholinear, fully programmable keyboard with thumb key matrix. So you can put any keys on any position to facilitate the thumb usage. And it\u0026rsquo;s need somtime to get used it.\nSince my colleague is a diligent advocator of non-QWERTY layout (He use Dvorak)\nI think why not changing my layout on this keyboard. So I did some survey on layouts.\nWhy choose Norman Instead of Dvorak or Colemak.\nDvorak basically change everything. Change to it may does cost alot. Also abandoned the QWERTY short keys like C-a, C-c, C-v.\nColemak does keep the shortcuts, but I don\u0026rsquo;t like the home row design (QWERTY GH position).\nNorman layout website does explain a lot, pursuade me.\nAnd found someone already use it for years. So finally I choose Norman.\nhttps://aloysius.wordpress.com/2013/10/12/learning-the-norman-layout-week-1/\nhttps://people.ergodox-ez.com/aaron-patterson/\nTyping speed? After 2 weeks practice. Basically use TypingClub and Klavaro.\nI can type Norman in 30~40 words per minute. My QWERTY speed is 50 WPM.\nI think will take more time to concrete the muscle memory. During the practice. Muscle memory is everywhere.\nSingle char, bigram, popular words, although I already memorize the Norman position, and the fingers auto put on the QWERTY position ready to trigger.\nIt\u0026rsquo;s worth it to change the layout. I type QWERTY for many years (like everybody).\nMake some practice I think everybody can chage their layout in 1 month.\nI feel comfortable on typing, my hands move less than typing in QWERTY, and some word become vey easy to type like test or international.\nAnd I start the another typing lesson today typing.io.\nFight against with another muscle memory. apply it on coding.\nApparently it needs more skill, speed down to about 25 words.\nLet me try how long I can turn coding more fluently.\n","link":"https://blog.cwc.tw/posts/learning-norman-layout-week2/","section":"posts","tags":["keyboard","敗家"],"title":"Learning the Norman Layout 2 weeks"},{"body":"J 火打山拉 簡略行程 D0: 妙高高原民宿\nD1: 纜車上山 -\u0026gt; 大谷避難山屋 -\u0026gt; 妙高山 -\u0026gt; 妙高山北峰 -\u0026gt; 黑澤池山屋\nD2: 黑澤池山屋 -\u0026gt; 高谷池山屋 -\u0026gt; 火打山 -\u0026gt; 高谷池山屋 -\u0026gt; 笹峰高原登山口，巴士下山\n前一天先到山腳下住一晚，搭新幹線到上越妙高站再轉乘巴士到山腳下，明天一早再搭纜車上山。\n妙高高原主要在冬季進行滑雪活動，在十月初這個時間點非常冷清， 我搭的巴士只有我一個，我沒上車的話司機就要開空車轉圈圈了呢 (´・ω・`)\n晚上跟民宿老闆娘聊天（比手畫腳），嘗試表達這件事，她秒懂回了一句說「上面沒有人吧。」 哈哈哈，真是非常鄉下的地方，下午稍微走了赤倉溫泉一圈，只找到一間商店有賣東西，買了一些能量棒與泡麵當晚餐。\n妙高高原看妙高山\n隔天一早搭便車到纜車站，大概 30s 的車程感謝民宿老闆娘讓我省一段腳力 XD\n登山口到大谷避難小屋是一路緩上，還滿好走的，小屋有廁所、水源、火山地形。也叫南地獄谷， 地圖標示我覺得不準，時間標兩小時，只花了大概 80 分鐘就走到了，後半段到山頂也標兩小時，就真的是兩小時 XD\n纜車上看妙高山，隔壁應該是弥八山\n鎖場\n後半段就陡上，一堆石頭，鎖場是最驚險的路段，有鐵鍊跟繩索可以抓，往上爬還滿安全，下山大概就很可怕了\n民宿老闆娘說鎖場之後繼續 WALK WALK WALK 很快就到山頂了。然而這是謊言，過鎖場還要 40 分鐘才能登頂QQ（很想在山頂吃中餐）\n登頂，滿是霧氣無展望如置身仙境，趕快拍個攻頂照洗洗睡\n過北峰下山準備到大倉乘越，毫不意外的是陡下，乘越就鞍部拉，到鞍部之後再翻一個小山頭就到山屋了，下山走一段就開始沒手機訊號，一路到山屋都沒有再抓到訊號\n大倉乘越 霧氣剛好散去，驚鴻一瞥的長助池秋色，要繞一小段路就沒特別過去\n黑澤池山屋，八角形的外觀非常特別，三層結構，右邊是放鞋子的寮仔\n山屋採全預約制，快到山屋的時候遇到一個外國人回頭往妙高山走，算一下時間現在往回走肯定摸黑， 問一下為啥往回走，她說因為沒預約，所以山屋不給睡，語氣中透了一點無奈，因為她原本預約的時間剛好有颱風，所以晚了幾天過來。 晚上看山屋仍有空位，不能理解沒預約就不讓睡的堅持，確認她有頭燈也就目送她離開\n價格表 採光 山屋內部，睡三樓\n山屋不提供開水，直接指了一罐 400 yen 的礦泉水給我，靠是文化衝擊，居然沒開水，懶得燒就買了一瓶水一瓶可樂等放飯，\n等放飯的時間原本在外面喝啤酒 (500 yen) 的大叔就直接鋪棉被就寢了，靠是文化衝擊，五點多就在山屋睡大覺。少見多怪\n本日山屋爆滿，遭遇一百多個小學生健行，山屋安排他們先用餐，坐在三樓一直聞到樓下飄上來的咖哩香，身心靈都準備好要吃咖哩了，結果一下去說咖哩被吃完了，換成佃煮之類的東西 QQQQQQ\n吃完就洗洗睡了，山屋內部非常乾燥，上面也有衣架給你晾衣服，隔天起來衣服已經全乾。\n黑澤池與山屋\n早餐輪到成熟的大人們先吃，五點半放飯，吃蛋餅皮抹果醬，吃完就出發往高谷池，也是翻過一個小山頭來到高谷池山屋，高谷池曾入選 CNN 日本の最も美しい場所31選 大概長這樣 然而我看到的是這樣 捶心肝，大概是颱風剛過的關係，不見滿山紅黃，下山後翻九月底的 instagram 照片更是久久不能自已， 這次爬山主要就是想看看高谷池，沒訂到高谷池山屋已經很鬱卒現在你又給我看這個\n振奮一下精神繼續往火打前進，往火打路況極好，前半段濕原都是木棧道，後半段登頂像合歡東峰，一路階梯往上 天狗庭與木棧道\n鄰近的燒山跟北阿爾卑斯，白色那顆應該是五龍岳\n妙高山、破火口、以及很小很小的富士山\n天氣極好，富士山是山友熱心提示才發現，離這麼遠看辨識度還是很高\n木棧道有點窄，會車都會心跳加速臉紅紅，\n下山遇到正要上去的小學生們，跟他們會車會很有活力的對我喊「摳尼吉哇」一次大概會車 30 個， 我也要一直講「摳尼吉哇」反擊回去，他們實在太有活力，太耀眼了\n山頂風很大，待一會兒就下山了，回到高谷池山屋煮水吃中飯，再往下走到笹峰高原搭巴士下山\n擴建中的高谷池山屋\n這次因為訂到黑澤池山屋的關係選擇從妙高山開始，看其他人遊記好像都從火打山開始，從笹峰高原開始到火打山，路況都很不錯，只有 12 曲那邊陡一點。相對來說妙高山就難爬得多，爛泥不少，跨步落差也比較大，第一天登山口只有碰到三組人，登山道再跟另一條路線燕溫泉交會有再碰到一些人，但都是單日來回，熊鈴、短褲、CamelBak 野跑水袋，步伐輕快有點帥。如果從妙高下山也有班次比較密集的纜車可以搭，巴士班數一天三班來回實在有點不方便。\n這次計畫滿久的，能完美實踐非常開心，感謝老天爺賞臉與路上所有人的幫助。\nRefs 妙高、火打遊記\nhttp://knoxyang.blogspot.com/2017/09/blog-post_20.html http://froda.pixnet.net/blog/post/226231448-myoko-mountain https://solomo.xinmedia.com/1446473702/148944-myoko 日本登山 App\nYAMAP 地圖、山屋電話、跟預估時程\n妙高市觀光局 笹ヶ峰直行バス 天空纜車 來去日本妙高找台灣好媳婦 登山計画書\nhttps://ja.wikipedia.org/wiki/%E7%99%BB%E5%B1%B1%E8%A8%88%E7%94%BB%E6%9B%B8 ","link":"https://blog.cwc.tw/posts/myoko/","section":"posts","tags":["Japan"],"title":"妙高、火打兩日縱走"},{"body":"最近公司 build tool 因為專案爆肥越來越慢，build code 要花個十分鐘左右，不太行啊， ~泡咖啡時間變長了呀逼~\n不過暫時沒有時間去優化他，同事提出一個\nbuild-code \u0026amp;\u0026amp; printf \u0026#39;\\a\u0026#39; build 完扣給你逼一下\n這招透過 SSH 連進去當然不會逼，如果用 iTerm2 就是意思意思閃一下並亮個紅燈給你看\n但是好像還是要喵一下 session tab or Dock icon，似乎不是很方便啊\n這時候另一個同事又提出用 speech-dispatcher 跟 say 講話給你聽\n欸，這想法蒸蚌！\n不過這玩意 via SSH 不 work 啊！覺得聲音通知是 developer 的未來的我在 Google 努力找尋其他方法。\n後來想到 iterm2 好像有功能可以抓 output 來觸發事件，組了一下確實會動，抓 build tool 最後的 Success 文字\nconfig 像這樣，build 完之後就會聲音通知你了哦，就像請了一位秘書呢 ^.\u0026lt; 列出支援的聲音檔，廣東話豪可愛ㄛ\n\u0026gt; say -v \u0026#39;?\u0026#39; Mei-Jia zh_TW # 您好，我叫美佳。我說國語。 Sin-ji zh_HK # 您好，我叫 Sin-ji。我講廣東話。 Ting-Ting zh_CN # 您好，我叫Ting-Ting。我讲中文普通话。 Ref:\niTerm2 triggers macOS push notification ","link":"https://blog.cwc.tw/posts/terminal-notify/","section":"posts","tags":null,"title":"Terminal Notify"},{"body":"https://github.com/uber/py-find-injection\n用程式化的方式掃出 code base 沒有乖乖用 paramstyle sql 語句\n鴿子封包，uber 在 2013 年丟出來的玩具\n原理利用 AST 拆 code 找出特定的 function name，並比對第一個參數有沒有用過字串串接\ndefault 會找 session.execute cursor.execute\n簡單但有效，clone 下來改也很快。\n其中找字串串接的 code也滿有趣的，值得一讀\n但是歹記通常不是憨人想得這麼簡單，code base 裡面總有為了省事，及不好處理的 list parameter， 而自己串 sql。有年紀的 codebase 掃下去大概只有淚與累，大概只能用在自己開發或是放在 CI 上逼死同事。\n","link":"https://blog.cwc.tw/posts/find-sql-injection-in-python-code/","section":"posts","tags":["Python"],"title":"Find SQL injection in Python code"},{"body":"","link":"https://blog.cwc.tw/tags/mysql/","section":"tags","tags":null,"title":"MySQL"},{"body":"MySQL 5.6 tuple comparison bug\n這是一個用 IN clause 比較 primary key 卻得到 full table scan 的故事\ntl; dr\n升級 mysql \u0026gt;= 5.7, 改用 and, or 形式串接條件 Tuple Comparison Example\nselect * from users where (first_name, last_name) in ( (\u0026#39;John\u0026#39;, \u0026#39;Doe\u0026#39;), (\u0026#39;Haragaki\u0026#39;, \u0026#39;Yui\u0026#39;), ) 一開始直覺寫出 IN 的版本（因為 IN 好棒棒會用 binary search），結果 explain check 一看居然是 full table scan，昏倒。 想一下用 and + or 串接改看看\nselect * from users where (first_name=\u0026#39;John\u0026#39; and last_name=\u0026#39;Doe\u0026#39;) or (first_name=\u0026#39;Haragaki\u0026#39; and last_name=\u0026#39;Yui\u0026#39;) ) 哎唷不錯喔有吃到 index，就這樣先把 fix 丟上線。\n過陣子比較閒來挖一下問題出在哪\n翻到 stackoverflow 上的相關討論，列舉出 IN clause 的幾種使用方式，正是他說的第三種 tuple comparison 後面評論也給出 Percona 一篇文章\n指出是個 bug，而且這邊還是 2008 年的文章，一個好的 bug 果然是歷久彌新\n懶得架環境，用線上環境測一下， 看其他版本有沒有這問題。\n看起來在 MySQL 5.7 解決了，不巧公司用的是 5.6 只好先繼續用 workaround 耶嘿嘿\nRef:\nhttps://stackoverflow.com/questions/16117492/different-approach-of-using-in-clause-in-mysql https://www.percona.com/blog/2008/04/04/multi-column-in-clause-unexpected-mysql-issue/ https://www.db-fiddle.com/f/xpwiDid8dxHFVvKfD2sgxW/0 ","link":"https://blog.cwc.tw/posts/mysql-tuple-comparison-issue/","section":"posts","tags":["MySQL"],"title":"MySQL Tuple Comparison Issue"},{"body":"","link":"https://blog.cwc.tw/tags/networking/","section":"tags","tags":null,"title":"Networking"},{"body":" 又 買了台 AP（咦，為什麼我要說又），特色是方塊就古錐，4 port 可作 NAT/switch DC/POE 供電也可以 passthrough 出去\nSpec Model: airCube-AC\n(4) Gigabit Ethernet Ports 24V PoE Passthrough for airMAX CPE Dual-Band, 802.11ac, 2x2 MIMO Technology Up to 300 Mbps in the 2.4 GHz Radio Band Up to 866.7 Mbps in the 5 GHz Radio Band Powered by 24V Passive PoE or Included Power Adapter 可以看到大概就是華碩 AC1200 等級的機器，現在就在 ubnt beta store 上面賣，一台只要 50 鎂，沒有 AC 只要 25 鎂\n不過 只運美國 beta 要先註冊 ubnt 是家美國公司，據傳 RD 們都在台灣，不過他們家產品台灣還是不好買\n以前買過他們設備印象挺好，這次這麼古錐，再買一台來玩玩\n目前 這台只能透過 App 設定，設定過程挺簡單，點一點按一按就搞定惹\n插網路線/過電 裝 App 進同一個 lan 按掃描 掃 QR Code 即完成 App 操作畫面給泥們參考看看\nPros App 操作性不錯，好上手，介面清楚\n外形小巧，無天線放桌上不會顯得突兀，如果搭配 POE 可以多一個插座，\nCons 又是 passive POE，雖然低階產品不意外，但能不能支援個 802.3at\n天線內藏，目前丟在辦公室測試，訊號強度被 Asus 5300 屌打，能吸到的機器大概就麻將桌大小吧\n","link":"https://blog.cwc.tw/posts/aircube/","section":"posts","tags":["Networking","敗家"],"title":"unifi - airCube"},{"body":"Code review 的時候熊熊想戰 naming，戰 naming 最好的就是翻相關的 rfc spec\n這樣對同事提出建設性批評就會特有底氣 總之這次要戰 language tag，什麼是 langugage tag 呢？\n像是 zh_TW, zh_Hant, en_US 這種都可以說是 language tag，其中會用底線 _ 來區分每一段，\n好想知道一段一段切開來要怎麼稱呼人家\n相關的 rfc 甚至已經有老中青三代，我卻一個女朋友都沒有 rfc-1766 rfc-3066 rfc-4646 （回到正題），對 language tag 定義中 2*3ALPHA 百思不得其解，一直想要二乘三得六阿法。 看不懂實在很苦惱，這樣還跟人家戰什麼，只好先去看看 rfc 愛用的 ABNF Expression\n以前看到這個 ABNF Expression 吼，每次喵過去感覺略懂略懂，日子也就這樣過了\n這次終於是避不掉了，所幸看完之後發現還算實用，以後女朋友問你喜歡她哪一點就用 BNF 定義一下 她一定會對你的意見用白眼與沈默表示高度的心悅誠服 (? 投資前請詳閱公開 spec\n啊什麼是 ABNF？ Augmented-BNF \u0026ldquo;增強\u0026rdquo; 的 BNF\n啊什麼是 BNF？ Backus Normal Form\n可以說是描述語言的語言。就文法啦，BNF 利用符號來定義文法，掌握文法就可以說出他的語言 ABNF 擴展了 BNF 新增了若干規則，個人感覺類似於 syntax sugar 拉\nABNF 節錄部分 rfc-4646 如下\nlangtag = (language [\u0026#34;-\u0026#34; script] [\u0026#34;-\u0026#34; region] *(\u0026#34;-\u0026#34; variant) *(\u0026#34;-\u0026#34; extension) [\u0026#34;-\u0026#34; privateuse]) language = (2*3ALPHA [ extlang ]) ; shortest ISO 639 code script = 4ALPHA ; ISO 15924 code region = 2ALPHA ; ISO 3166 code variant = 5*8alphanum ; registered variants / (DIGIT 3alphanum) alphanum = (ALPHA / DIGIT) ; letters and numbers Rule 就是一條一條的定義拉，比較特別的是 rule naming 不區分大小寫， 也就是 \u0026lt;rulename\u0026gt;, \u0026lt;Rulename\u0026gt;, \u0026lt;RULENAME\u0026gt;, and \u0026lt;rUlENamE\u0026gt; 都是一樣的東西\nlangtag 就會由後面這些 rule 所組成，遞迴我喜翻你啊！\n串接使用空白 譬如說台灣身分證字號就是 1ALPHA 9DIGIT\n註解 ; 像是 region = 2ALPHA ; e.g. TW 大家有聽過 semicolon 笑話嗎？看過之後每次看到 semicolon 都無法直視呢\n選用 [] 跟 unix command manual 有點像，該不會也用 ABNF 吧？ 像是 ls [OPTION]... [FILE]... 這個大家很熟拉\nRepetition 重複拉，我覺得英文比較傳神 language 本身定義是 2*3ALPHA，* 代表 repetition, 2*3 其實就是 2~3 的意思啦，很反人類\n兩碼及三碼代表 ISO 639-1, ISO 639-2 就是 zh, ja, en 等等\nscript 定義是 4ALPHA，代表固定四碼後面又註解 ISO 15924 這邊應該是代表不同的書寫系統，像是 Hant, Hans\nregion 2ALPHA 就是 HK, TW 等等，你知我知獨眼龍也知\n這樣組合起來就是 zh_Hant_TW 順帶一提 variant 是方言，舉例來說客家話會長這樣 zh_hakka\nAlternatives: Rule1 / Rule2 可以看到 alphanum 用這條規則簡單定義出來 e.g. ALPHA / DIGIT\nSequence Group: (Rule1 Rule2) 參考 alphanum 如果沒有用 () 括起來 前後文對照會有問題\nElements enclosed in parentheses are treated as a single element, whose contents are strictly ordered. Thus, elem (foo / bar) blat matches (elem foo blat) or (elem bar blat), and elem foo / bar blat matches (elem foo) or (bar blat). 還有一些遺珠的的 ABNF 像是\nValue Range Alternatives 精確定義是由哪些字母或數字所組成\nIncremental Alternatives 方便定義一長串的 alternatives\nReferences: http://matt.might.net/articles/grammars-bnf-ebnf/ ","link":"https://blog.cwc.tw/posts/rfc-5234/","section":"posts","tags":null,"title":"分分鐘看懂 ABNF 以 language tag 為例"},{"body":"有一段時間了 20170909 的報告 http://www.nbu.gov.sk/skcsirt-sa-20170909-pypi/\n某組織發出的研究報告，指出 pip 裡面有若干 package 用很像的名字進行偽裝\n譬如說 crypto -\u0026gt; crypt\n偽裝的 package 會在 setup.py 裡面加料，system admin 只要 pip install 就會直接中招\n可以用這個檢查，檢查如果有直接移除重裝即可\npip list --format=legacy | egrep \u0026#39;^(acqusition|apidev-coop|bzip|crypt|django-server|pwd|setup-tools|telnet|urlib3|urllib) \u0026#39; stackoverflow 也有撿到以前的受害者 lol\n值得一提的是，惡意程式碼只會把一些系統資訊傳回在中國的 ip，並加上了這段註解，略佛？\n# Welcome Here! :) # just toy, no harm :) ","link":"https://blog.cwc.tw/posts/pip-malicious-packages/","section":"posts","tags":["Python"],"title":"Pip 藏有惡意套件"},{"body":"最近剛好有一些處理 email 資料的需求，要從一堆 exception mail 裡面撈出一些 id。\n之前數量不多都馬手動複製\n但這次有幾十個 conversations 看了就很懶，我內心特爛軟\n來問問看 Google 老師看有沒有聰明方法可以搞定這件事\n\u0026hellip;\n\\Google takeout/ 小叮噹語氣\n本質上是 Google service 眾的備份工具，在備份 gmail 部分裡面，可以只下載特定 email label\n還有一個問題是下載格式會是 mbox format，必須再做處理\n流程會是這樣子的\n把要 exported 的 email conversations 加一個新 label e.g. exported 去 Google takeout 請求該 label 的 backup Parse mbox file 也找到有志同道合兄弟寫的 Sydius/mbox-to-txt\n但這位 S 弟兄可能只要純文字，所以不吃的格式特多，這次要的資料被碼成 base64\n參考一下前人種樹是利用 python mailbox module 處理，copy 改下搞定\n","link":"https://blog.cwc.tw/posts/google-takeout/","section":"posts","tags":["Python"],"title":"根據標籤下載 gmail 備份"},{"body":" It\u0026rsquo;s just XML, what could probably go wrong? - Christian Heimes\nAnd \u0026hellip;\nXML is crap. Really. There are no excuses. XML is nasty to parse for humans, and it\u0026rsquo;s a disaster to parse even for computers. There\u0026rsquo;s just no reason for that horrible crap to exist. - Linus Trovalds\nIssue 最近 review 公司的一些外部服務的 callback api 的安全性。\n其中一個 api 交換資訊使用 xml 格式傳送，而 parse 時用 Python standard library 的 xml module\n而 xml module 有一些安全性上的弱點\n用 wiki 的 billion laughs sample code 當 payload 測試果然掛了，\n充滿惡意的憤青們可以只用一台電腦癱瘓掉家裡所有 web node，\n不過因為有鎖 ip ，所以也不是一個嚴重的安全性問題，廠廠。\nSolutions 看到問題後第一想法是不要用 xml module 處理，改用 lxml 之類的 3rd party lib\n後來想想這問題應該滿普遍的，應該會有其他解法可以考慮。\n期望可以有 Monkey Patch 或是至少提供相同 API 讓 migration 變得容易\n問 Google 老師找到 defusedxml 專案看起來有八成七像\n提供了相同 API，在 xmlrpc 部分是用 monkey patch，可以無痛轉換。\nCase closed 基本上在一個後 json 時代講 xml 實用性實在不高，不過人在江湖走跳，\n難免介接利用其他第三方服務，尤其是銀行業仍偏好使用 xml，\n在 parse 的時候還是需要注意是否會產生類似安全性問題。\nBomb has benn defused, counter terrorists win!\nbtw 找不到開頭引言的來源，所以確實 Python developer 曾經講過這句話，然後在 repo 被公開處刑？\n","link":"https://blog.cwc.tw/posts/python-xml-vulnerabilities/","section":"posts","tags":["Python","xml"],"title":"python xml vulnerabilities"},{"body":"","link":"https://blog.cwc.tw/tags/xml/","section":"tags","tags":null,"title":"xml"},{"body":"","link":"https://blog.cwc.tw/series/","section":"series","tags":null,"title":"Series"}]